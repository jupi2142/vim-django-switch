#!/usr/bin/env python
# encoding: utf-8
import vim
import os

def list_prompter(choice_list, prompt_phrase):
    choice_list = map(lambda index, choice: "%s: %s"%(index,choice), range(1, len(choice_list)+1), choice_list)
    choice_list = "\n".join(choice_list)
    vim.command('call inputsave()')
    vim.command("let user_input=input('" + choice_list + "\n" + prompt_phrase +" => ')")
    vim.command("call inputrestore()")
    "I'm going to make a no 'press enter' version of this"
    return vim.eval('user_input')

def find_project_dir(current_file_filename):	#could be easier with set autochdir
    current_file_directory = os.path.dirname(current_file_filename).strip()
    locations_of_manage_py = os.popen("locate manage.py").readlines()
    django_project_paths = map(os.path.dirname, locations_of_manage_py)
    for project_path in django_project_paths:
        if project_path in current_file_directory:
            return project_path
    return ""

def apps(files):
    return map(os.path.dirname, files)

def files_list(project_dir, filename):
    return map(str.strip, os.popen('find %s -maxdepth 3 | grep "%s$"'%(project_dir, filename)).readlines())

def open_app_file(current_file_filename, filename, project_dir):	#for the files in the app
    project_dir = find_project_dir(os.path.dirname(current_file_filename))
    #project_dir = project_dir if project_dir != "" else find_project_dir(os.path.dirname(current_file_filename))
    if project_dir == "":
        return ""
    files = files_list(project_dir, filename)
    if len(files) <= 0:
        return ""
    #os.path.exists
    #if the folder exists but the file doesn't, I can create the file
    #files like forms.py and all that aren't autogenerated.
    #but in which app folder?
    #ask him?
    #or maybe I can get_of_create them
    elif len(files) == 1:
        vim.command("e %s"%files[0])	#or vim.command("e %s"%files[0])
        return project_dir
    else:
        chosen_file_index = list_prompter(choice_list = files, prompt_phrase = "Choose one:")
        chosen_file = files[int(chosen_file_index)-1]
        vim.command("e %s"%chosen_file)
        return project_dir

def open_settings_folder_file(current_file_filename, filename, project_dir):	#for the files in the app
    #project_dir = project_dir if project_dir != "" else find_project_dir(os.path.dirname(current_file_filename))
    project_dir = find_project_dir(os.path.dirname(current_file_filename))
    if project_dir == "":
        return ""
    settings_file_path = os.path.abspath(os.popen("find %s | grep settings.py$"%project_dir).readline())
    settings_folder = os.path.dirname(settings_file_path)
    vim.command("e %s"%("/".join([settings_folder, filename])))	#or vim.command("e %s"%"/".join(project_dir, filename)
    return project_dir
    """handle multiple urls.py like views.py"""
	#vim.command("!python %s"%("/".join([settings_folder, filename])))	#or vim.command("e %s"%"\".join(project_dir, filename)	

